/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jgamut;

import ENSDF_data.*;
import ensdf_datapoint.dataPt;
import Jama.Matrix;
import java.util.List;
import java.util.ArrayList;
import text_io.textFileIO;
import text_io.textTable;
import java.io.IOException;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import java.io.File;

/**
 *
 * @author Michael
 */
public class JGAMUT_GUI extends javax.swing.JFrame {

    /**
     * Creates new form JGAMUT_GUI
     */
    public JGAMUT_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileChooser = new javax.swing.JFileChooser();
        saveFileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        inputFilePathTextField = new javax.swing.JTextField();
        inputBrowseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        intermediateFilePathTextField = new javax.swing.JTextField();
        intermediateBrowseButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        averagesFilePathTextField = new javax.swing.JTextField();
        averagesBrowseButton = new javax.swing.JButton();
        createIntermediateFileButton = new javax.swing.JButton();
        createAveragesFileButton = new javax.swing.JButton();
        limitMinUncertCheckBox = new javax.swing.JCheckBox();
        gamutButton = new javax.swing.JButton();
        useEnergyShiftsCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        statusTextLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        adoptedPathTextField = new javax.swing.JTextField();
        adoptedBrowseButton = new javax.swing.JButton();
        outputAdoptedCheckBox = new javax.swing.JCheckBox();
        useNonNumericUncertCheckBox = new javax.swing.JCheckBox();
        defaultIntensityUncertSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        tabSeparatedCheckBox = new javax.swing.JCheckBox();
        energyShiftButton = new javax.swing.JButton();
        RemoveDatasetButton = new javax.swing.JButton();
        decayDatasetNormalizationCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        defaultEnergyUncertSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();

        saveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JGAMUT v1.1.11 (Mar 28, 2019)");

        jLabel1.setText("Input ENS file:");

        inputFilePathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFilePathTextFieldActionPerformed(evt);
            }
        });

        inputBrowseButton.setText("Browse...");
        inputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBrowseButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Intermediate file:");

        intermediateBrowseButton.setText("Browse...");
        intermediateBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intermediateBrowseButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Averages file:");

        averagesBrowseButton.setText("Browse...");
        averagesBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averagesBrowseButtonActionPerformed(evt);
            }
        });

        createIntermediateFileButton.setText("Create Intermediate File");
        createIntermediateFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createIntermediateFileButtonActionPerformed(evt);
            }
        });

        createAveragesFileButton.setText("Create Averages File (Gamma-by-Gamma)");
        createAveragesFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAveragesFileButtonActionPerformed(evt);
            }
        });

        limitMinUncertCheckBox.setText("Limit minimum uncertainty of average to be the minimum uncertainty in the data set (Gamma-by-Gamma only)");

        gamutButton.setText("Create Averages Table (GAMUT)");
        gamutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamutButtonActionPerformed(evt);
            }
        });

        useEnergyShiftsCheckBox.setText("Include energy shifts in fit (GAMUT only)");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        statusTextLabel.setText("Status: Ready!");
        statusTextLabel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                statusTextLabelPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusTextLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusTextLabel)
        );

        jLabel4.setText("Averages ENSDF format file:");

        adoptedBrowseButton.setText("Browse...");
        adoptedBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adoptedBrowseButtonActionPerformed(evt);
            }
        });

        outputAdoptedCheckBox.setText("Output Averages in ENSDF format");
        outputAdoptedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputAdoptedCheckBoxActionPerformed(evt);
            }
        });

        useNonNumericUncertCheckBox.setText("Use non-numeric uncertainties in unweighted average (Gamma-by-Gamma only)");

        defaultIntensityUncertSpinner.setModel(new javax.swing.SpinnerNumberModel(20.0d, 5.0d, 75.0d, 1.0d));

        jLabel5.setText("Default value (GAMUT only) for non-numeric uncertainties in intensities (i.e. missing or AP), in percent: ");

        tabSeparatedCheckBox.setText("Use tab separated intermediate file");

        energyShiftButton.setText("Calculate Linear Energy Shifts");
        energyShiftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                energyShiftButtonActionPerformed(evt);
            }
        });

        RemoveDatasetButton.setText("Remove Dataset from Intermediate File");
        RemoveDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveDatasetButtonActionPerformed(evt);
            }
        });

        decayDatasetNormalizationCheckBox.setText("Use decay dataset intensity normalization (i.e. normalize single gamma to 100 instead of strongest gamma in each level to 100)");

        jLabel6.setText("Default value (GAMUT only) for non-numeric uncertainties in energies (i.e. missing or AP), in keV: ");

        defaultEnergyUncertSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.2d, 5.0d, 0.1d));

        jLabel7.setText("*Note: uncertainties of GT, LT, GE, LE, CA and SY are all ignorned in GAMUT procedure (for both energies and intensities).");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(averagesFilePathTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(averagesBrowseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adoptedPathTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adoptedBrowseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decayDatasetNormalizationCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(createIntermediateFileButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(energyShiftButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addComponent(RemoveDatasetButton))
                                    .addComponent(outputAdoptedCheckBox))
                                .addGap(31, 31, 31)
                                .addComponent(createAveragesFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gamutButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(inputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputBrowseButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(intermediateFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(intermediateBrowseButton))
                            .addComponent(tabSeparatedCheckBox)
                            .addComponent(useNonNumericUncertCheckBox)
                            .addComponent(limitMinUncertCheckBox)
                            .addComponent(useEnergyShiftsCheckBox)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(defaultEnergyUncertSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(defaultIntensityUncertSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel7))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(intermediateFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intermediateBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(averagesFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averagesBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adoptedPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(adoptedBrowseButton)))
                .addGap(18, 18, 18)
                .addComponent(tabSeparatedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decayDatasetNormalizationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limitMinUncertCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useNonNumericUncertCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(useEnergyShiftsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defaultIntensityUncertSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defaultEnergyUncertSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(createAveragesFileButton)
                        .addComponent(gamutButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(outputAdoptedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(energyShiftButton)
                            .addComponent(createIntermediateFileButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RemoveDatasetButton)))
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void showIOErrorMessage(String fileType){
        JOptionPane.showMessageDialog(null, fileType + " File I/O Error! No output will be written." + 
                        "\nIs a writable file specified in the " + 
                        fileType + " File textbox?",
                        fileType + " File I/O Error", JOptionPane.ERROR_MESSAGE);
    }
    
    public class updateStatus implements Runnable{
        private String message;
        @Override
        public void run(){
            statusTextLabel.setText(message);
        }
        
        public void setMessage(String s){
            message = s;
            SwingUtilities.invokeLater(this);
        }
    }
    
    private class disableInterface implements Runnable{
        @Override
        public void run(){
            createIntermediateFileButton.setEnabled(false);
            createAveragesFileButton.setEnabled(false);
            gamutButton.setEnabled(false);
            energyShiftButton.setEnabled(false);
            limitMinUncertCheckBox.setEnabled(false);
            useNonNumericUncertCheckBox.setEnabled(false);
            useEnergyShiftsCheckBox.setEnabled(false);
            outputAdoptedCheckBox.setEnabled(false);
            defaultIntensityUncertSpinner.setEnabled(false);
            defaultEnergyUncertSpinner.setEnabled(false);
            jLabel5.setEnabled(false);
            decayDatasetNormalizationCheckBox.setEnabled(false);
            tabSeparatedCheckBox.setEnabled(false);
            RemoveDatasetButton.setEnabled(false);
        }
    }
    
    private class enableInterface implements Runnable{
        @Override
        public void run(){
            createIntermediateFileButton.setEnabled(true);
            createAveragesFileButton.setEnabled(true);
            gamutButton.setEnabled(true);
            energyShiftButton.setEnabled(true);
            limitMinUncertCheckBox.setEnabled(true);
            useNonNumericUncertCheckBox.setEnabled(true);
            useEnergyShiftsCheckBox.setEnabled(true);
            outputAdoptedCheckBox.setEnabled(true);
            defaultIntensityUncertSpinner.setEnabled(true);
            defaultEnergyUncertSpinner.setEnabled(true);
            jLabel5.setEnabled(true);
            decayDatasetNormalizationCheckBox.setEnabled(true);
            tabSeparatedCheckBox.setEnabled(true);
            RemoveDatasetButton.setEnabled(true);
        }
    }
    
    private class createIntermediateFile_runnable implements Runnable{
        @Override
        public void run(){
            List<ENSDFDataset> datasets;
            ENSDFDataset combined;
            List<String> intermediateLines;
            updateStatus updater = new updateStatus();
            
            SwingUtilities.invokeLater(new disableInterface());
            updater.setMessage("Status: Reading ENSDF Input...");
            datasets = ENSDFIO.readENSFile(inputFilePathTextField.getText(),
                    decayDatasetNormalizationCheckBox.isSelected());
            
            if(datasets == null){ //failed to read input file
                updater.setMessage("Status: Ready!");
                SwingUtilities.invokeLater(new enableInterface());
                return;
            }
            
            updater.setMessage("Status: Matching Levels...");
            combined = new ENSDFDataset(datasets, 30.0d, updater);
            
            updater.setMessage("Status: Creating Intermediate File...");
            intermediateLines = ENSDFDataset.generateDatasetTable(combined,
                    tabSeparatedCheckBox.isSelected());
            
            try{
                textFileIO.write(intermediateLines, intermediateFilePathTextField.getText());
            }catch(IOException e){
                showIOErrorMessage("Intermediate");
                updater.setMessage("Status: Ready!");
                SwingUtilities.invokeLater(new enableInterface());
                return;
            }
            
            updater.setMessage("Status: Ready!");
            JOptionPane.showMessageDialog(null, "Complete!\n" + 
                    "Intermediate File has been written to " + intermediateFilePathTextField.getText());
            SwingUtilities.invokeLater(new enableInterface());
        }
    }
    
    
    private void createIntermediateFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createIntermediateFileButtonActionPerformed
        
        new Thread(new createIntermediateFile_runnable()).start();
    }//GEN-LAST:event_createIntermediateFileButtonActionPerformed

    
    private class createAveragesFile_runnable implements Runnable{
        @Override
        public void run(){
            List<String> fileData;
            List<gammaEquivalenceClass> gammaGroups, tmp;
            ENSDFDataset datatableset;
            updateStatus updater = new updateStatus();
            List<ENSDFDataset> datasets;

            SwingUtilities.invokeLater(new disableInterface());
            try{
                updater.setMessage("Satus: Reading Intermediate File...");
                fileData = textFileIO.read(intermediateFilePathTextField.getText());
                updater.setMessage("Satus: Parsing Intermediate File...");
                datatableset = ENSDFDataset.readDatasetTable(fileData,
                        tabSeparatedCheckBox.isSelected());

                if(datatableset == null){
                    updater.setMessage("Satus: Ready!");
                    SwingUtilities.invokeLater(new enableInterface());
                    return;
                }
                if(decayDatasetNormalizationCheckBox.isSelected()){
                    datatableset.renormalizeGammaRays(true);
                }
                gammaGroups = new ArrayList<>();
                updater.setMessage("Satus: Grouping Gamma Rays for Averaging...");
                for(level l : datatableset.getLevels()){
                    tmp = ENSDFDataset.groupByGamma(l);
                    for(gammaEquivalenceClass G : tmp){
                        gammaGroups.add(G);
                    }
                }
                updater.setMessage("Satus: Creating Averages File...");
                textFileIO.write(ENSDFDataset.generateAveragesTable(gammaGroups, 
                                limitMinUncertCheckBox.isSelected(),
                                useNonNumericUncertCheckBox.isSelected(),
                                decayDatasetNormalizationCheckBox.isSelected()), 
                        averagesFilePathTextField.getText());
                //as a side-effect generateAveragesTable adds the average gamma
                //to gammaGroups
                if(outputAdoptedCheckBox.isSelected()){
                    try{
                        fileData.clear();
                        updater.setMessage("Status: Reading ENSDF Input...");
                        //re-read the input, saving the lines of the files this
                        //time
                        datasets = ENSDFIO.readENSFile(inputFilePathTextField.getText(), 
                                decayDatasetNormalizationCheckBox.isSelected(), true, false);
                        
                        if(datasets == null){ //failed to read input file
                            updater.setMessage("Status: Creating New Adopted Dataset...");
                            fileData = ENSDFDataset.generateAdoptedDataset(gammaGroups);
                        }else{
                            for(ENSDFDataset d : datasets){
                                if(d.getTitle().equals("ADOPTED LEVELS, GAMMAS")){
                                    updater.setMessage("Status: Creating New Adopted Dataset...");
                                    fileData = ENSDFDataset.generateAdoptedDataset(gammaGroups, d);
                                    break;
                                }
                            }
                        }
                        
                        if(fileData.isEmpty()){
                            updater.setMessage("Status: Creating New Adopted Dataset...");
                            fileData = ENSDFDataset.generateAdoptedDataset(gammaGroups);
                        }
                        
                        updater.setMessage("Status: Writing New Adopted Dataset...");
                        textFileIO.write(fileData, adoptedPathTextField.getText());
                    }catch(IOException e){
                        showIOErrorMessage("Averages ENSDF format");
                        updater.setMessage("Satus: Ready!");
                        SwingUtilities.invokeLater(new enableInterface());
                        return;
                    }
                }
            }catch(IOException e){
                showIOErrorMessage("Averages");
                updater.setMessage("Satus: Ready!");
                SwingUtilities.invokeLater(new enableInterface());
                return;
            }

            updater.setMessage("Satus: Ready!");
            JOptionPane.showMessageDialog(null, "Complete!\n" + 
                    "Averages File written to " + averagesFilePathTextField.getText());
            SwingUtilities.invokeLater(new enableInterface());
        }
    }
    
    
    private void createAveragesFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAveragesFileButtonActionPerformed
        new Thread(new createAveragesFile_runnable()).start();
    }//GEN-LAST:event_createAveragesFileButtonActionPerformed

    private void inputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBrowseButtonActionPerformed
        openFileChooser.showDialog(this, "Open");
        String chosenFile;
        
        chosenFile = openFileChooser.getSelectedFile().getAbsolutePath();
        inputFilePathTextField.setText(chosenFile);
        //remove extension from file name if it is there
        if(openFileChooser.getSelectedFile().getName().contains(".")){
            chosenFile = chosenFile.substring(0, chosenFile.lastIndexOf("."));
        }
        
        intermediateFilePathTextField.setText(chosenFile + ".intermediate.txt");
        if(averagesFilePathTextField.getText().equals("")){
            averagesFilePathTextField.setText(chosenFile + ".averages.txt");
        }
        if(adoptedPathTextField.getText().equals("")){
            adoptedPathTextField.setText(chosenFile + ".newAdopted.ens");
        }
        
    }//GEN-LAST:event_inputBrowseButtonActionPerformed

    private void intermediateBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intermediateBrowseButtonActionPerformed
        String chosenFile;
        if(!intermediateFilePathTextField.getText().equals("")){
            saveFileChooser.setSelectedFile(new File(intermediateFilePathTextField.getText()));
        }
        saveFileChooser.showDialog(this, "Save...");
        
        chosenFile = saveFileChooser.getSelectedFile().getAbsolutePath();
        intermediateFilePathTextField.setText(chosenFile);
        if(saveFileChooser.getSelectedFile().getName().contains(".intermediate")){
            chosenFile = chosenFile.substring(0, chosenFile.lastIndexOf(".intermediate"));
        }else if(saveFileChooser.getSelectedFile().getName().contains(".")){
            chosenFile = chosenFile.substring(0, chosenFile.lastIndexOf("."));
        }
        
        if(averagesFilePathTextField.getText().equals("")){
            averagesFilePathTextField.setText(chosenFile + ".averages.txt");
        }
        if(adoptedPathTextField.getText().equals("")){
            adoptedPathTextField.setText(chosenFile + ".newAdopted.ens");
        }
    }//GEN-LAST:event_intermediateBrowseButtonActionPerformed

    private void averagesBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averagesBrowseButtonActionPerformed
        if(!averagesFilePathTextField.getText().equals("")){
            saveFileChooser.setSelectedFile(new File(averagesFilePathTextField.getText()));
        }
        saveFileChooser.showDialog(this, "Save...");
        
        averagesFilePathTextField.setText(saveFileChooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_averagesBrowseButtonActionPerformed

    private class gamut_runnable implements Runnable{
        @Override
        public void run(){
            List<String> fileData;
            ENSDFDataset datatableset, orig_datatableset, gamutDataset;
            Matrix E, W_E, G, L, dL, fitEg, dFitEg; //energy matrices
            boolean useShifts = useEnergyShiftsCheckBox.isSelected();
            Matrix I, W_I, beta, Ibar, dIbar; //intensity matrices
            updateStatus updater = new updateStatus();
            List<ENSDFDataset> datasets;
            double defaultIntensityUncert = (double)defaultIntensityUncertSpinner.getValue() / 100d;
            double defaultEnergyUncert = (double)defaultEnergyUncertSpinner.getValue();

            SwingUtilities.invokeLater(new disableInterface());
            try{
                updater.setMessage("Satus: Reading Intermediate File...");
                fileData = textFileIO.read(intermediateFilePathTextField.getText());
                updater.setMessage("Satus: Parsing Intermediate File...");
                datatableset = ENSDFDataset.readDatasetTable(fileData, true,
                        tabSeparatedCheckBox.isSelected());

                if(datatableset == null){
                    updater.setMessage("Satus: Ready!");
                    SwingUtilities.invokeLater(new enableInterface());
                    return;
                }

                //remove gammas with bad uncertainties
                datatableset.removeGammasWithBadUncert();
                
                orig_datatableset = ENSDFDataset.readDatasetTable(fileData, 
                        true, tabSeparatedCheckBox.isSelected());
                
                updater.setMessage("Satus: Creating Level Scheme Placement Matrix...");
                E = new Matrix(datatableset.getNumNonzeroGammas() - datatableset.getNumAdoptedGammas() + 
                        datatableset.getNumZeroLevels(), 1);
                W_E = new Matrix(E.getRowDimension(), 1);
                fitEg = new Matrix(E.getRowDimension(), 1);
                dFitEg = new Matrix(E.getRowDimension(), 1);
                G = GAMUT_Algorithms.createPlacementMatrix(datatableset, E, W_E, 
                        defaultEnergyUncert,
                        useShifts);
                dL = new Matrix(G.getColumnDimension(), 1);
                updater.setMessage("Satus: Fitting Energy Levels...");
                L = GAMUT_Algorithms.solveLevelSchemeSystem(datatableset, G, E, W_E, 
                        fitEg, dFitEg, dL);

                updater.setMessage("Satus: Performing Gamma-Ray Energy Chi^2 Analysis...");
                while(!GAMUT_Algorithms.EgChiSqAnalysis(datatableset, G, L, W_E)){
                    updater.setMessage("Satus: Fitting Energy Levels...");
                    L = GAMUT_Algorithms.solveLevelSchemeSystem(datatableset, G, E, W_E, 
                        fitEg, dFitEg, dL);
                    updater.setMessage("Satus: Performing Gamma-Ray Energy Chi^2 Analysis...");
                }

                if(decayDatasetNormalizationCheckBox.isSelected()){
                    //do dataset-wide intensity fitting
                    for(gamma g : datatableset.getGammas()){
                        try{
                            Double.parseDouble(g.getDIg());
                        }catch(NumberFormatException e){
                            try{
                                g.setNumericDIg(defaultIntensityUncert*Double.parseDouble(g.getIg()));
                            }catch(NumberFormatException e2){
                                //do nothing
                            }
                        }
                    }
                    datatableset.renormalizeGammaRays(true);
                    updater.setMessage("Satus: Creating Gamma-Ray Intensities Matrix...");
                    I = new Matrix(datatableset.getNumUniqueGammas(), 
                            datatableset.getNumSources());
                    W_I = new Matrix(I.getRowDimension(), I.getColumnDimension());
                    GAMUT_Algorithms.setupIntensityMatrices(datatableset, I, W_I,
                            defaultIntensityUncert);
                    updater.setMessage("Satus: Calculating Dataset Intensity Multipliers...");
                    beta = GAMUT_Algorithms.intensitySolve(I, W_I, false);
                    dIbar = new Matrix(I.getRowDimension(), 1);
                    updater.setMessage("Satus: Calculating Adopted Intensities...");
                    Ibar = GAMUT_Algorithms.calcIbar(I, W_I, beta, dIbar);


                    updater.setMessage("Satus: Performing Gamma-Ray Intensity Chi^2 Analysis...");
                    while(!GAMUT_Algorithms.IgChiSqAnalysis(datatableset, beta, Ibar, W_I)){
                        updater.setMessage("Satus: Calculating Dataset Intensity Multipliers...");
                        beta = GAMUT_Algorithms.intensitySolve(I, W_I, false);
                        updater.setMessage("Satus: Calculating Adopted Intensities...");
                        Ibar = GAMUT_Algorithms.calcIbar(I, W_I, beta, dIbar);
                        updater.setMessage("Satus: Performing Gamma-Ray Intensity Chi^2 Analysis...");
                    }
                }else{
                    Ibar = new Matrix(datatableset.getNumUniqueGammas(), 1);
                    dIbar = new Matrix(Ibar.getRowDimension(), 1);
                    updater.setMessage("Satus: Calculating Dataset Intensity Multipliers...");
                    GAMUT_Algorithms.calcIntensitiesLevelByLevel(datatableset, Ibar, 
                            dIbar, defaultIntensityUncert);
                }

                updater.setMessage("Satus: Creating GAMUT Adopted Dataset...");
                gamutDataset = new ENSDFDataset(datatableset, L, dL, fitEg, dFitEg, Ibar, dIbar,
                    decayDatasetNormalizationCheckBox.isSelected());

                updater.setMessage("Satus: Writing Report Table...");
                if(useShifts){
                    textFileIO.write(ENSDFDataset.generateReportTable(orig_datatableset, 
                        datatableset, gamutDataset, null, L.getMatrix(datatableset.getNumLevelsWithGammas(),
                                L.getRowDimension()-1, 0, 0),
                                dL.getMatrix(datatableset.getNumLevelsWithGammas(),
                                dL.getRowDimension()-1, 0, 0)), averagesFilePathTextField.getText());
                }else{
                    textFileIO.write(ENSDFDataset.generateReportTable(orig_datatableset, 
                        datatableset, gamutDataset, null, null, null), 
                            averagesFilePathTextField.getText());
                }
                
                
                if(outputAdoptedCheckBox.isSelected()){
                    try{
                        fileData.clear();
                        updater.setMessage("Status: Reading ENSDF Input...");
                        //re-read the input, saving the lines of the files this
                        //time
                        datasets = ENSDFIO.readENSFile(inputFilePathTextField.getText(), 
                                decayDatasetNormalizationCheckBox.isSelected(), true, false);
                        
                        if(datasets == null){ //failed to read input file
                            updater.setMessage("Status: Creating New Adopted Dataset...");
                            fileData = ENSDFDataset.generateAdoptedDataset(gamutDataset);
                        }else{
                            for(ENSDFDataset d : datasets){
                                if(d.getTitle().equals("ADOPTED LEVELS, GAMMAS")){
                                    updater.setMessage("Status: Creating New Adopted Dataset...");
                                    fileData = ENSDFDataset.generateAdoptedDataset(gamutDataset, d);
                                    break;
                                }
                            }
                        }
                        
                        if(fileData.isEmpty()){
                            updater.setMessage("Status: Creating New Adopted Dataset...");
                            fileData = ENSDFDataset.generateAdoptedDataset(gamutDataset);
                        }
                        
                        updater.setMessage("Status: Writing New Adopted Dataset...");
                        textFileIO.write(fileData, adoptedPathTextField.getText());
                    }catch(IOException e){
                        showIOErrorMessage("Averages ENSDF format");
                        updater.setMessage("Satus: Ready!");
                        SwingUtilities.invokeLater(new enableInterface());
                        return;
                    }
                }
            }catch(IOException e){
                showIOErrorMessage("Averages");
                updater.setMessage("Satus: Ready!");
                SwingUtilities.invokeLater(new enableInterface());
                return;
            }

            updater.setMessage("Satus: Ready!");
            JOptionPane.showMessageDialog(null, "Complete!\n" + 
                    "Averages File written to " + averagesFilePathTextField.getText());
            SwingUtilities.invokeLater(new enableInterface());
        }
    }
    
    
    private void gamutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamutButtonActionPerformed
        new Thread(new gamut_runnable()).start();
    }//GEN-LAST:event_gamutButtonActionPerformed

    private void statusTextLabelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_statusTextLabelPropertyChange
        statusTextLabel.repaint();
        statusTextLabel.revalidate();
    }//GEN-LAST:event_statusTextLabelPropertyChange

    private void adoptedBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adoptedBrowseButtonActionPerformed
        if(!adoptedPathTextField.getText().equals("")){
            saveFileChooser.setSelectedFile(new File(adoptedPathTextField.getText()));
        }
        saveFileChooser.showDialog(this, "Save...");
        
        adoptedPathTextField.setText(saveFileChooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_adoptedBrowseButtonActionPerformed

    
    private class energyShifts_runnable implements Runnable{
        @Override
        public void run(){
            List<String> fileData;
            ENSDFDataset datatableset;
            updateStatus updater = new updateStatus();
            String[] sources;
            String standard;
            Matrix slopesAndIntercepts, uncert;
            int j, offset, answer;
            textTable result;
            gammaContextDialog resultWindow = new gammaContextDialog(null, false);
            JOptionPane questionPane;
            JDialog questionDialog;
            String qTitle, qMessage;

            SwingUtilities.invokeLater(new disableInterface());
            try{
                updater.setMessage("Satus: Reading Intermediate File...");
                fileData = textFileIO.read(intermediateFilePathTextField.getText());
                updater.setMessage("Satus: Parsing Intermediate File...");
                datatableset = ENSDFDataset.readDatasetTable(fileData,
                        tabSeparatedCheckBox.isSelected());

                if(datatableset == null){
                    updater.setMessage("Satus: Ready!");
                    SwingUtilities.invokeLater(new enableInterface());
                    return;
                }
                
                //remove gammas with bad uncertainties
                datatableset.removeGammasWithBadUncert();
                
                sources = datatableset.getSources();
                updater.setMessage("Satus: Waiting For Input...");
                standard = (String)JOptionPane.showInputDialog(null,
                        "Select a dataset to be used as the standard to calculate shifts relative to.",
                        "Choose Energy Standard...",
                        JOptionPane.QUESTION_MESSAGE, null, sources, sources[0]);
                
                if(standard == null){
                    updater.setMessage("Satus: Ready!");
                    SwingUtilities.invokeLater(new enableInterface());
                    return;
                }
                
                updater.setMessage("Satus: Calculating Linear Shifts...");
                uncert = new Matrix(2*(sources.length - 1), 1);
                slopesAndIntercepts = GAMUT_Algorithms.calculateLinearEnergyShifts(datatableset, 
                        standard, (double)defaultEnergyUncertSpinner.getValue(),
                        uncert);
                
                if(slopesAndIntercepts == null){
                    updater.setMessage("Satus: Ready!");
                    JOptionPane.showMessageDialog(null, "Invalid dataset chosen to be standard. Ensure the dataset chosen as the standard has gamma-ray energy measurements.", "Invalid Standard", JOptionPane.ERROR_MESSAGE);
                    SwingUtilities.invokeLater(new enableInterface());
                    return;
                }
                
                result = new textTable();
                result.setCell(0, 0, "Dataset");
                result.setCell(0, 1, "Shift Constant Term");
                result.setCell(0, 2, "Shift Linear Term");
                offset = 0;
                for(j=0; j<sources.length; j++){
                    result.setCell(j+1, 0, sources[j]);
                    if(sources[j].equals(standard)){
                        result.setCell(j+1, 1, "-");
                        result.setCell(j+1, 2, "-");
                        offset = 1;
                    }else{
                        result.setCell(j+1, 1, 
                                (new dataPt(slopesAndIntercepts.get(j-offset+sources.length-1, 0),
                                uncert.get(j-offset+sources.length-1, 0),
                                uncert.get(j-offset+sources.length-1, 0))).toString());
                        result.setCell(j+1, 2, 
                                (new dataPt(slopesAndIntercepts.get(j-offset, 0),
                                uncert.get(j-offset, 0),
                                uncert.get(j-offset, 0))).toString());
                    }
                }
                resultWindow.setTitle("Shift results");
                resultWindow.setTextArea(result.toStringList());
                resultWindow.setVisible(true);
                updater.setMessage("Satus: Waiting for Input...");
                
                qMessage = "Apply shifts to intermediate file?\n\nWarning! This operation will overwrite the current intermediate file and cannot be undone.\nIt is recommended you create a copy of the original intermediate file before continuing.";
                qTitle = "Apply Shifts?";
                questionPane = new JOptionPane(qMessage, JOptionPane.QUESTION_MESSAGE, JOptionPane.YES_NO_OPTION);
                questionDialog = questionPane.createDialog(qTitle);
                questionDialog.setModal(false);
                questionDialog.setVisible(true);

                while(true){ //wait for user to give an answer
                    try{
                        answer = Integer.parseInt(String.valueOf(questionPane.getValue()));
                        break;
                    }catch(NumberFormatException e){
                        //do nothing until result is an integer
                        //if null then message box was closed
                        if(String.valueOf(questionPane.getValue()).equals("null")){
                            answer = JOptionPane.NO_OPTION;
                            break;
                        }
                    }
                }
                
                //answer = JOptionPane.showConfirmDialog(null, "Apply shifts to intermediate file?\n\nWarning! This operation will overwrite the current intermediate file and cannot be undone.\nIt is recommended you create a copy of the original intermediate file before continuing.", 
                //        "Apply Shifts?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if(answer == JOptionPane.YES_OPTION){
                    updater.setMessage("Satus: Applying Linear Shifts...");
                    GAMUT_Algorithms.applyLinearEnergyShifts(datatableset, standard, slopesAndIntercepts);
                    updater.setMessage("Satus: Writing Intermediate File...");
                    textFileIO.write(ENSDFDataset.generateDatasetTable(datatableset, tabSeparatedCheckBox.isSelected()),
                           intermediateFilePathTextField.getText());
                }
                resultWindow.setVisible(false);
                resultWindow.dispose();
            }catch(IOException e){
                showIOErrorMessage("Intermediate");
                updater.setMessage("Satus: Ready!");
                SwingUtilities.invokeLater(new enableInterface());
                return;
            }

            updater.setMessage("Satus: Ready!");
            qMessage = "Complete!";
            if(answer == JOptionPane.YES_OPTION){
                qMessage += "\nIntermediate File has been written to " + intermediateFilePathTextField.getText();
            }
            JOptionPane.showMessageDialog(null, qMessage);
            SwingUtilities.invokeLater(new enableInterface());
        }
    }
    
    private void energyShiftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_energyShiftButtonActionPerformed
        new Thread(new energyShifts_runnable()).start();
    }//GEN-LAST:event_energyShiftButtonActionPerformed

    
    private class removeDataset_runnable implements Runnable{
        @Override
        public void run(){
            List<String> fileData;
            ENSDFDataset datatableset;
            updateStatus updater = new updateStatus();
            String[] sources;
            String removed;
            
            SwingUtilities.invokeLater(new disableInterface());
            try{
                updater.setMessage("Satus: Reading Intermediate File...");
                fileData = textFileIO.read(intermediateFilePathTextField.getText());
                updater.setMessage("Satus: Parsing Intermediate File...");
                datatableset = ENSDFDataset.readDatasetTable(fileData,
                        tabSeparatedCheckBox.isSelected());

                if(datatableset == null){
                    updater.setMessage("Satus: Ready!");
                    SwingUtilities.invokeLater(new enableInterface());
                    return;
                }
                
                sources = datatableset.getSources();
                updater.setMessage("Satus: Waiting For Input...");
                removed = (String)JOptionPane.showInputDialog(null,
                        "Select a dataset to be commented out with hash (#) symbol.",
                        "Choose Dataset...",
                        JOptionPane.QUESTION_MESSAGE, null, sources, sources[0]);
                
                if(removed == null){
                    updater.setMessage("Satus: Ready!");
                    SwingUtilities.invokeLater(new enableInterface());
                    return;
                }
                
                updater.setMessage("Satus: Removing Dataset...");
                for(gamma g : datatableset.getGammas()){
                    if(g.getSource().equals(removed)){
                        g.setSource("#" + removed);
                    }
                }
                
                updater.setMessage("Satus: Writing Intermediate File...");
                textFileIO.write(ENSDFDataset.generateDatasetTable(datatableset, tabSeparatedCheckBox.isSelected()),
                           intermediateFilePathTextField.getText());

            }catch(IOException e){
                showIOErrorMessage("Intermediate");
                updater.setMessage("Satus: Ready!");
                SwingUtilities.invokeLater(new enableInterface());
                return;
            }

            updater.setMessage("Satus: Ready!");
            JOptionPane.showMessageDialog(null, "Complete!\n" + 
                    "Intermediate File has been written to " + intermediateFilePathTextField.getText());
            SwingUtilities.invokeLater(new enableInterface());
        }
    }
    
    private void RemoveDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveDatasetButtonActionPerformed
        new Thread(new removeDataset_runnable()).start();
    }//GEN-LAST:event_RemoveDatasetButtonActionPerformed

    private void outputAdoptedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputAdoptedCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputAdoptedCheckBoxActionPerformed

    private void inputFilePathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFilePathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFilePathTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JGAMUT_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JGAMUT_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JGAMUT_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JGAMUT_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JGAMUT_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RemoveDatasetButton;
    private javax.swing.JButton adoptedBrowseButton;
    private javax.swing.JTextField adoptedPathTextField;
    private javax.swing.JButton averagesBrowseButton;
    private javax.swing.JTextField averagesFilePathTextField;
    private javax.swing.JButton createAveragesFileButton;
    private javax.swing.JButton createIntermediateFileButton;
    private javax.swing.JCheckBox decayDatasetNormalizationCheckBox;
    private javax.swing.JSpinner defaultEnergyUncertSpinner;
    private javax.swing.JSpinner defaultIntensityUncertSpinner;
    private javax.swing.JButton energyShiftButton;
    private javax.swing.JButton gamutButton;
    private javax.swing.JButton inputBrowseButton;
    private javax.swing.JTextField inputFilePathTextField;
    private javax.swing.JButton intermediateBrowseButton;
    private javax.swing.JTextField intermediateFilePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox limitMinUncertCheckBox;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JCheckBox outputAdoptedCheckBox;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JLabel statusTextLabel;
    private javax.swing.JCheckBox tabSeparatedCheckBox;
    private javax.swing.JCheckBox useEnergyShiftsCheckBox;
    private javax.swing.JCheckBox useNonNumericUncertCheckBox;
    // End of variables declaration//GEN-END:variables
}
